Подготовка к вопросам про многопоточность
1. Чем отличается процесс от потока?
        Процессы и потоки связаны друг с другом, но при этом имеют существенные различия.

        Процесс — экземпляр программы во время выполнения, независимый объект,
        которому выделены системные ресурсы (например, процессорное время и память).
        Каждый процесс выполняется в отдельном адресном пространстве: один процесс не может получить доступ
        к переменным и структурам данных другого. Если процесс хочет получить доступ к чужим ресурсам,
        необходимо использовать межпроцессное взаимодействие. Это могут быть конвейеры,
        файлы, каналы связи между компьютерами и многое другое.

        Поток использует то же самое пространства стека, что и процесс,
        а множество потоков совместно используют данные своих состояний. Как правило,
        каждый поток может работать (читать и писать) с одной и той же областью памяти,
        в отличие от процессов, которые не могут просто так получить доступ к памяти другого процесса.
        У каждого потока есть собственные регистры и собственный стек, но другие потоки могут их использовать.

        Поток — определенный способ выполнения процесса. Когда один поток изменяет ресурс процесса,
        это изменение сразу же становится видно другим потокам этого процесса.

2. Каким образом можно создать поток?
        Поток можножно создать с помощью класса Thread.start
3. Как работают методы sleep, yield, wait, notify и notifyAll?
4. Объясните следующие термины: монитор, мьютекс, критическая секция.
5. Как работает join()?
        Join "присоединяет" созданные запросы к главному потоку, что заставляет
        главный поток исполнения ожидать завершения присоединенных потоков
6. Что такое DeadLock? Приведите примеры.
        Один поток заходит в метод 1, блокирует его, и пытается попасть в метод 2
        Тем временем другой поток находится в методе 2 (блокируя его) и пытается попасть в метод 1
        Это взаимная блокировака или DeadLock
7. Назовите различия между Collections.synchronizedMap(new HashMap()) и ConcurrentHashMap.
8. Различия в интерфейсах Runnable и Callable.
        Callable<V> возвращает результат типа V , а экземпляр Runnable - нет.
        Callable<V> может Callable<V> проверенные исключения, тогда как экземпляр Runnable не может
9. Различя между isInterrupted(), interrupted().
        interrupted() является static и проверяет текущий поток.
        isInterrupted() - это метод экземпляра, который проверяет объект Thread, на который он вызывается.
        Общей ошибкой является вызов статического метода в экземпляре.

10. Что происходит при вызове Thread.interrupt()?
        Происходит прерывание потока
11. Перечислите ВСЕ причины по которым может выскочить InterruptedException.
12. Назовите отличия synchronize{} и ReentrantLock.
13. Приведите наиболее существенное отличие между CountDownLatch и Barrier.
14. Отличие Thread.start() и Thread.run()?
15. Объясните ключевое слово volatile.
16. Расскажите про приоритеты потока.
17. Что такое потоки-демоны?
        Демон-поток - это поток, который не предотвращает выход JVM, когда программа заканчивается,
        но поток все еще работает. Примером для потока демона является сбор мусора.
        Когда все потоки, не являющиеся демонами, заканчивают работу, JVM останавливается,
        а все оставшиеся потоки демонов удаляются
18. Назовите все возможные состояния потока.
        NEW
        RUNNABLE
        BLOCKED
        WAITING
        TIMED_WAITING
        TERMINATED
19. Что такое race condition?
20. Что такое Thread Local переменная?
21. Что такое FutureTask?
22. Что такое ThreadPool?
23. Что такое Semaphore?
24. Чем отличается submit от execute у ExecutorServices?
25. Чем отличается shutdown от shutdownNow у ThreadPoolExecutor?
27. Как создать ThreadPool у ExecutorService только на 1, на 5, на неограниченное количество потоков.
28. Что такое ReadWriteLock?
29. В чём отличие Thread от FutureTask? В чём отличие Thread.interrupt() и FutureTask.cancel().
30. Расскажите про шаблон проектирования Producer Consumer.